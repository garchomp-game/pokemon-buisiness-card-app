// create
firebase.database().ref(テーブル名).push(dataObject)
// example
firebase.database().ref('message').push({
  message: this.input,
  name: this.user.displayName,
  image: this.user.photoURL
})
// 取得
const ref_message = firebase.database().ref(テーブル名)
// example
const ref_message = firebase.database().ref('message')

/*
data() {
  return {
    chat: []
  }
}
*/
if (user) {
  this.chat = []
  // message に変更があったときのハンドラを登録
  ref_message.limitToLast(10).on('child_added', this.childAdded)
} else {
  // message に変更があったときのハンドラを解除
  ref_message.limitToLast(10).off('child_added', this.childAdded)
}

// sample page
// https://00m.in/EB6ei

// template

export default {
  data () {
    return {
      lists: [], // データ読み込みに使う配列
      values: {
        name: 'otoka',
        age: '20',
        race: 'garchomp'
      }
    }
  },
  created () {
    const refMessage = firebase.database().ref('pokemons') // モデルの生成。と思っていい。
    refMessage.limitToLast(数).on('child_added', this.childAdded) // とりあえずchildAddedは固定でおk
  },
  methods: {
    childAdded (snap) {
      // 実は先ほどのonメソッドから渡ってくるのはコールバックで、引数にsnapが入ります。
      // ここに必要な情報が渡ってくるっぽいので、これを使う。
      const data = snap.val() // いわゆる中身をこれで取り出している。
      this.lists.push({
        key: snap.key, // 任意。ただkeyは一応snapに直接書いてあるみたい。
        name: data.name,
        age: data.age,
        race: data.race
      })
    },
    doSend () {
      firebase.database().ref('pokemons').push({
        name: this.values.name,
        age: this.values.age,
        race: this.values.race
      })
    }
  }
}
